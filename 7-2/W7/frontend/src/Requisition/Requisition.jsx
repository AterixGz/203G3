import React, { useState, useEffect } from 'react';
import './Requisition.css';
import api from '../utils/axios';

function PurchaseRequisitionForm() {
  const initialFormData = {
    prNumber: 'PR07677',
    creator: '',
    requestDate: '',
    vendorName: '',
    vendorContact: '',
    description: '',
    status: 'draft',
    paymentTerms: 'cash',
    refPR: ''
  };

  const initialItemData = {
    description: '',
    unit: 'piece',
    requiredDate: '',
    quantity: 1,
    price: 0,
    amount: 0
  };

  // State declarations
  const [formData, setFormData] = useState(initialFormData);
  const [items, setItems] = useState([initialItemData]);
  const [totalAmount, setTotalAmount] = useState(0);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [showMenu, setShowMenu] = useState(false);

  // Fetch initial data
  useEffect(() => {
    fetchRequisitionData();
  }, []);

  // Fetch requisition data
  const fetchRequisitionData = async () => {
    try {
      setLoading(true);
      const response = await api.get('/api/requisitions');
      if (response.data) {
        setFormData({
          ...initialFormData,
          ...response.data
        });
        setItems(response.data.items || [initialItemData]);
        calculateTotal(response.data.items || [initialItemData]);
      }
    } catch (error) {
      setError('Error fetching data: ' + error.message);
      console.error('Error fetching data:', error);
    } finally {
      setLoading(false);
    }
  };

  // Calculate total amount
  const calculateTotal = (items) => {
    const total = items.reduce((sum, item) => sum + (item.quantity * item.price), 0);
    setTotalAmount(total);
  };

  // Handle form input changes
  const handleInputChange = (e) => {
    const { id, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [id]: value
    }));
  };

  // Handle item changes
  const handleItemChange = (index, field, value) => {
    const newItems = [...items];
    newItems[index] = {
      ...newItems[index],
      [field]: value
    };

    // Recalculate amount if quantity or price changes
    if (field === 'quantity' || field === 'price') {
      newItems[index].amount = newItems[index].quantity * newItems[index].price;
    }

    setItems(newItems);
    calculateTotal(newItems);
  };

  // Add new item
  const handleAddItem = () => {
    setItems([...items, { ...initialItemData }]);
  };

  // Remove item
  const handleRemoveItem = (index) => {
    const newItems = items.filter((_, i) => i !== index);
    setItems(newItems);
    calculateTotal(newItems);
  };

  // Submit form
  const handleSubmit = async () => {
    try {
      setLoading(true);
      setError(null);

      const payload = {
        ...formData,
        items,
        totalAmount,
        submittedAt: new Date().toISOString()
      };

      const response = await api.post('/api/requisitions', payload);
      
      if (response.status === 201) {
        // Handle success
        console.log('Requisition created successfully');
        // Reset form or redirect
      }
    } catch (error) {
      setError('Error submitting form: ' + error.message);
      console.error('Error submitting form:', error);
    } finally {
      setLoading(false);
    }
  };

  // Reset form
  const handleReset = () => {
    setFormData(initialFormData);
    setItems([initialItemData]);
    setTotalAmount(0);
    setError(null);
  };

  if (loading) {
    return <div className="loading">Loading...</div>;
  }

  const handleViewHistory = (type) => {
    switch(type) {
      case 'purchase':
        console.log('View purchase history');
        break;
      case 'receipt':
        console.log('View receipt history');
        break;
      case 'invoice':
        console.log('View invoice history');
        break;
      case 'payment':
        console.log('View payment history');
        break;
      case 'balance':
        console.log('View AP balance history');
        break;
      default:
        break;
    }
    setShowMenu(false);
  };

  return (
    <div className="purchase-requisition-form">
      {error && <div className="error-message">{error}</div>}
      
      <div className="header-section">
        <h2>‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏ó‡∏≥‡πÉ‡∏ö‡∏Ç‡∏≠‡∏ã‡∏∑‡πâ‡∏≠ (Purchase Requisition)</h2>
        <div className="header-buttons">
          <button 
            className="menu-button"
            onClick={() => setShowMenu(!showMenu)}
            title="‡πÄ‡∏°‡∏ô‡∏π"
          >
            ...
          </button>
          {showMenu && (
            <div className="menu-dropdown">
              <button onClick={() => handleViewHistory('purchase')}>
                üìã ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
              </button>
              <button onClick={() => handleViewHistory('receipt')}>
                üì¶ ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
              </button>
              <button onClick={() => handleViewHistory('invoice')}>
                üìÑ ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏ô‡∏µ‡πâ
              </button>
              <button onClick={() => handleViewHistory('balance')}>
                üíµ ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡∏µ‡πâ
              </button>
              <button onClick={() => handleViewHistory('payment')}>
                üí∞ ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô
              </button>
            </div>
          )}
        </div>
      </div>
      <p>‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏Ç‡∏≠‡∏ã‡∏∑‡πâ‡∏≠ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠</p>

      <div className="form-row">
        <label htmlFor="prNumber">‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏ö‡∏Ç‡∏≠‡∏ã‡∏∑‡πâ‡∏≠</label>
        <input 
          type="text" 
          id="prNumber" 
          value={formData.prNumber} 
          readOnly 
        />
      </div>

      <div className="form-row">
        <label htmlFor="creator">‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏ó‡∏≥</label>
        <input 
          type="text" 
          id="creator" 
          value={formData.creator}
          onChange={handleInputChange}
        />
      </div>

      <div className="form-row">
        <label htmlFor="requestDate">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏ã‡∏∑‡πâ‡∏≠</label>
        <input 
          type="date" 
          id="requestDate" 
          value={formData.requestDate}
          onChange={handleInputChange}
        />
      </div>

      <div className="form-row">
        <label htmlFor="vendorName">‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢</label>
        <input 
          type="text" 
          id="vendorName" 
          placeholder="‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢" 
          value={formData.vendorName}
          onChange={handleInputChange}
        />
      </div>

      <div className="form-row">
        <label htmlFor="vendorContact">‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢</label>
        <input 
          type="text" 
          id="vendorContact" 
          placeholder="‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠" 
          value={formData.vendorContact}
          onChange={handleInputChange}
        />
      </div>

      <div className="form-row">
        <label htmlFor="description">‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏´‡∏±‡∏ß‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á</label>
        <textarea 
          id="description" 
          placeholder="‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏ã‡∏∑‡πâ‡∏≠" 
          value={formData.description}
          onChange={handleInputChange}
        />
      </div>

      <div className="form-row">
        <label htmlFor="status">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</label>
        <select 
          id="status"
          value={formData.status}
          onChange={handleInputChange}
        >
          <option value="draft">‡πÅ‡∏ö‡∏ö‡∏£‡πà‡∏≤‡∏á</option>
          <option value="pending">‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥</option>
          <option value="approved">‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß</option>
          <option value="rejected">‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥</option>
        </select>
      </div>

      <div className="form-row">
        <label htmlFor="paymentTerms">‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</label>
        <select 
          id="paymentTerms"
          value={formData.paymentTerms}
          onChange={handleInputChange}
        >
          <option value="cash">‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î</option>
          <option value="credit30">‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï 30 ‡∏ß‡∏±‡∏ô</option>
          <option value="credit60">‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï 60 ‡∏ß‡∏±‡∏ô</option>
        </select>
      </div>

      <div className="form-row">
        <label htmlFor="refPR">‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡πÉ‡∏ö‡∏Ç‡∏≠‡∏ã‡∏∑‡πâ‡∏≠</label>
        <input 
          type="text" 
          id="refPR" 
          placeholder="‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á" 
          value={formData.refPR}
          onChange={handleInputChange}
        />
      </div>

      <div className="item-list">
        <h3>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤/‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£</h3>
        <button className="add-item-button" onClick={handleAddItem}>‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</button>

        {items.map((item, index) => (
          <div className="item-details" key={index}>
            <div className="row">
              <label>‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</label>
              <input 
                type="text" 
                placeholder="‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤/‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£" 
                value={item.description}
                onChange={(e) => handleItemChange(index, 'description', e.target.value)}
              />
              
              <label>‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ô‡∏±‡∏ö</label>
              <select 
                value={item.unit}
                onChange={(e) => handleItemChange(index, 'unit', e.target.value)}
              >
                <option value="piece">‡∏ä‡∏¥‡πâ‡∏ô</option>
                <option value="unit">‡∏´‡∏ô‡πà‡∏ß‡∏¢</option>
                <option value="set">‡∏ä‡∏∏‡∏î</option>
              </select>

              <label>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£</label>
              <input 
                type="date" 
                value={item.requiredDate}
                onChange={(e) => handleItemChange(index, 'requiredDate', e.target.value)}
              />
            </div>
            <div className="row">
              <label>‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì</label>
              <input 
                type="number" 
                min="1" 
                value={item.quantity}
                onChange={(e) => handleItemChange(index, 'quantity', e.target.value)}
              />

              <label>‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢</label>
              <input 
                type="number" 
                min="0" 
                step="0.01" 
                value={item.price}
                onChange={(e) => handleItemChange(index, 'price', e.target.value)}
              />

              <label>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô</label>
              <input 
                type="number" 
                readOnly 
                value={item.amount}
              />
            </div>
            <button className="remove-item-button" onClick={() => handleRemoveItem(index)}>‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</button>
          </div>
        ))}
      </div>

      <div className="total">
        <label>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏ß‡∏°</label>
        <input type="text" value={`‡∏ø${totalAmount.toFixed(2)}`} readOnly />
      </div>

      <div className="form-actions">
        <button 
          className="cancel-button" 
          onClick={handleReset}
          disabled={loading}
        >
          ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
        </button>
        <button 
          className="submit-button" 
          onClick={handleSubmit}
          disabled={loading}
        >
          {loading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...' : '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ö‡∏Ç‡∏≠‡∏ã‡∏∑‡πâ‡∏≠'}
        </button>
      </div>
    </div>
  );
}

export default PurchaseRequisitionForm;