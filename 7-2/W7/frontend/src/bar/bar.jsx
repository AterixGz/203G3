import React, { useState, useEffect } from 'react';
import './bar.css';
import api from '../utils/axios';

function Sidebar({ currentPage, showDocViewer, onNavigate, onDocViewer }) {
  const [menuItems, setMenuItems] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  useEffect(() => {
    fetchMenuConfig();
  }, []);

  const fetchMenuConfig = async () => {
    try {
      setLoading(true);
      const response = await api.get('/api/menu/config');
      setMenuItems(response.data);
    } catch (err) {
      setError('Error loading menu: ' + err.message);
      setMenuItems(defaultMenuItems);
    } finally {
      setLoading(false);
    }
  };

  const defaultMenuItems = [
    { id: 'requisition', icon: 'üóí', text: '‡πÉ‡∏ö‡∏Ç‡∏≠‡∏ã‡∏∑‡πâ‡∏≠' },
    { id: 'purchaseOrder', icon: 'üóè', text: '‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠' },
    { id: 'poReceipt', icon: 'üóê', text: '‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤' },
    { id: 'invoice', icon: 'üóé', text: '‡∏ï‡∏±‡πâ‡∏á‡∏´‡∏ô‡∏µ‡πâ' },
    { id: 'apBalance', icon: '‚ò∞', text: '‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡∏µ‡πâ' },
    { id: 'payment', icon: '$', text: '‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô' }
  ];

  const handleNavigate = async (page) => {
    try {
      await api.post('/api/navigation/log', {
        page,
        timestamp: new Date().toISOString()
      });
      onNavigate(page);
    } catch (err) {
      console.error('Navigation logging failed:', err);
      onNavigate(page);
    }
  };

  const handleLogout = async () => {
    try {
      await api.post('/api/logout'); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Logout
      localStorage.removeItem('token'); // ‡∏•‡∏ö token ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å localStorage
      window.location.href = '/login'; // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤ Login
    } catch (err) {
      console.error('Logout failed:', err);
    }
  };

  if (loading) {
    return <aside className="sidebar loading">Loading...</aside>;
  }

  return (
    <aside className="sidebar">
      {error && <div className="error-message">{error}</div>}

      <nav className="nav-menu">
        {menuItems.map(item => (
          <button 
            key={item.id}
            className={`nav-item ${currentPage === item.id ? 'active' : ''}`}
            onClick={() => handleNavigate(item.id)}
          >
            <span className="icon">{item.icon}</span>
            <span className="text">{item.text}</span>
          </button>
        ))}

        <button 
          className={`nav-item ${showDocViewer ? 'active' : ''}`}
          onClick={onDocViewer}
        >
          <span className="icon">‚éô</span>
          <span className="text">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£</span>
        </button>

        {/* ‡∏õ‡∏∏‡πà‡∏° Logout */}
        <button 
          className="nav-item logout"
          onClick={handleLogout}
        >
          <span className="icon">üö™</span>
          <span className="text">‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö</span>
        </button>
      </nav>
    </aside>
  );
}

export default Sidebar;